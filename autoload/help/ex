# Fuzzy files explorer
#
# Usage: ex [-H] [-d{dir}] [-e] [-g] [-v] [topic]

# TODO:
# Unfunction hhelp, hopen & hgrep in order to keep my shell env clean?

# Help
hhelp() {
local info
read -r -d $'\0' info << 'HELP'
ex [-%F{cyan}H%f] [-%F{cyan}d%f{dir}] [-%F{cyan}e%f] [-%F{cyan}g%f] [-%F{cyan}v%f] [topic]

 -%F{cyan}H%f: include hidden files
 -%F{cyan}d%f: change root directory
 -%F{cyan}e%f: exact filename matches
 -%F{cyan}g%f: list (grep) files with occurrences of topic
 -%F{cyan}v%f: open with vim (actually $EDITOR, or use %F{cyan}alt-v%f from within fzf)
HELP
if [[ $1 == 0 ]]
then print -P $info
else print -P $info >&2
fi
}

# Options
local -a actions
local -a fd_add_opts
local -a rg_add_opts
local exact_matches
local hbase=.

# scan for options
if [[ ${@[(i)-*]} -le $# ]]
then
   local -a topics

   while :
   do
      case $1 in
         (-h|--help)
            hhelp 0
            return
            ;;
         (-H)
            fd_add_opts=(-H -E.git -E.svn)
            rg_add_opts=(--hidden -g'!.git' -g'!.svn')
            shift
            ;;
         (-d)
            if [[ -d $2 ]]
            then
               hbase=${2%/}
               shift 2
            else
               print -P 'Error: %F{red}-d%f option requires a %F{red}folder%f' >&2
               return 1
            fi
            ;;
         (-d?*)
            hbase=${${1#-d}%/}
            hbase=${hbase/\~/$HOME}
            shift
            ;;
         (-e)
            exact_matches=1
            shift
            ;;
         (-g)
            actions+=(grep)
            shift
            ;;
         (-v)
            actions+=(edit)
            shift
            ;;
         ([^-]*)
            topics+=($1)
            shift
            ;;
         (-?*)
            print -P "Error: unknown option %F{red}$1%f" >&2
            return 1
            ;;
         # argument list is empty at this point
         (*)
            break
            ;;
      esac
   done

   # reset arguments
   [[ $topics ]] && set $topics
fi

# View a help file
hopen() {
   local hfile
   local hpath

   hfile=${1#$'\n'}
   hfile=${hfile#alt-v$'\n'}

   # cosmetics: open file, not ./file
   if [[ $hbase == . ]]
   then
      hpath=$hfile
   else
      hpath=$hbase/$hfile
   fi

   # open with nvim (send to running instance)?
   if [[ $1 == alt-v* || $actions == *edit* ]]
   then
      if [[ ${@[-1]} == --hls && $EDITOR == *vim ]]
      then
         # before 'modelineexpr, zv was used
         $EDITOR $hpath -c"0/${@[-2]}" -c'noh|norm zz<cr>'
      else
         $EDITOR $hpath
      fi
      return
   fi

   # binary file
   if file --mime-encoding $hpath | grep -q 'binary$'
   then
      if [[ ! -x $hpath ]]
      then
         # prompt for yes/no?
         open $hpath
         return
      fi
      return 1
   fi

   if [[ $hfile != *.md ]]
   then
      # display path of file being viewed
      print -P -f '%s%q%s\n' '%F{cyan}' $hpath '%f'
   fi

   case $hfile in
           *.md) open https://github.com/kurkale6ka/help/blob/master/$hfile ;;
      printf.sh) bash $hpath ;;
         *.^txt)  bat $hpath ;;
              *)  cat $hpath ;;
   esac
}

# Grep for occurrences of topic
hgrep() {
   local -a hfiles

   hfiles=(${(0)"$(cd $hbase && rg -l -0 $rg_add_opts -- $@)"})
   if [[ $hfiles ]]
   then
      if [[ $#hfiles > 1 ]]
      then
         hfiles=$(printf '%s\0' $hfiles | fzf --read0 -0 -1 --cycle --expect='alt-v' --preview "rg -Sn --color=always $@ -- $hbase/{}")
         [[ $hfiles ]] || return 1
      fi
      hopen $hfiles $@ --hls
   fi
}

# Main

# Force searching for files with occurrences of topic
if [[ $topics && $actions == *grep* ]]
then
   hgrep $1
   return
fi

local hfile
local -a hfiles

if (($#))
then
   # Search help files matching topic
   if ((exact_matches))
   then
      hfiles=(${(0)"$(cd $hbase && fd -tf -E'*~' -0 $fd_add_opts -p -- $1)"})
      if [[ $hfiles ]]
      then
         if [[ $#hfiles > 1 ]]
         then
            # -q isn't required here, it's just supplied to enable highlighting
            hfiles=$(printf '%s\0' $hfiles | fzf -q"$*" --read0 -0 -1 --cycle --expect='alt-v' --preview "if file --mime $hbase/{} | grep -q binary; then echo 'No preview available' 1>&2; else cat $hbase/{}; fi")
            # exit if ctrl+c was pressed
            [[ $hfiles ]] || return 1
         fi
         hopen $hfiles
      else
         # if no matching filenames were found, list files with occurrences of topic
         hgrep $1
      fi
   else
      # fuzzy
      hfile=$(cd $hbase && fd -tf -E'*~' -0 $fd_add_opts | fzf -q"$*" --read0 -0 -1 --cycle --expect='alt-v' --preview 'if file --mime {} | grep -q binary; then echo "No preview available" 1>&2; else cat {}; fi' || echo $pipestatus[2])

      if [[ $hfile == $'\n'1 ]] # no results
      then
         # TODO: fix case with multiple non-option arguments?
         #       hgrep: rg -Sl patt1 | ... | xargs rg -S pattn
         #       also above and for fd ... $1
         hgrep $1
      elif [[ $hfile != 130 ]] # canceled with ctrl+c
      then
         hopen $hfile
      fi
   fi
else
   # Search trough all help files
   if ((exact_matches))
   then
      hfile=$(cd $hbase && fd -tf -E'*~' -0 $fd_add_opts | fzf -e --read0 -0 -1 --cycle --expect='alt-v' --preview 'if file --mime {} | grep -q binary; then echo "No preview available" 1>&2; else cat {}; fi')
   else
      # fuzzy
      hfile=$(cd $hbase && fd -tf -E'*~' -0 $fd_add_opts | fzf --read0 -0 -1 --cycle --expect='alt-v' --preview 'if file --mime {} | grep -q binary; then echo "No preview available" 1>&2; else cat {}; fi')
   fi

   # The 'no results' case is ignored, no grep will be tried
   if [[ $hfile ]]
   then
      hopen $hfile
   fi
fi
