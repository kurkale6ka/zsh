# Copy to ~/.config/zsh/after/ssh
#
# Auto syncing would be possible only if using ssh without options
# rseverywhere <node>
#
# also needed for bash:
#
# "$REPOS_BASE"/bash/.bash_profile_after:
#    exec bash --rcfile "$REPOS_BASE"/bash/.bashrc
#
# the execs are there because with 'ssh host command' we don't get a login

local user=dimitar

if command ssh -TG $@ | grep 'user\b' | grep -q "root\|$user"
then
   command ssh $@
   return
fi

local base="$user"
local host_commands

# NB: when switching to root,
# use su vs su - in order to preserve $REPOS_BASE then paste for bash or exec zsh
xclip << ROOT_PASTE
{
TERM=xterm-256color
. ~/.bash_profile
. "\$REPOS_BASE"/bash/.bash_profile
}
ROOT_PASTE

read -r -d '' host_commands << REMOTE
TERM=xterm-256color

# sourcing these is needed because with 'ssh host command' it won't happen
if grep -q zsh /etc/shells
then
   . /etc/zshenv   2>/dev/null
   . /etc/zprofile 2>/dev/null
   . /etc/zshrc    2>/dev/null
elif [[ \$SHELL == *bash ]]
then
   . /etc/profile 2>/dev/null
elif [[ \$SHELL == *ksh ]]
then
   . /etc/ksh.kshrc 2>/dev/null
   . ~/.profile
   exec ksh
fi

if [[ -d ~/$base ]]
then
   export REPOS_BASE=~/"$base"
else
   if grep -q zsh /etc/shells
   then
      exec zsh
   elif [[ \$SHELL == *bash ]]
   then
      exec bash
   fi
fi

if grep -q zsh /etc/shells
then
   . "\$REPOS_BASE"/zsh/.zshenv

   zsh "\$REPOS_BASE"/scripts/db-create

   exec zsh
elif [[ \$SHELL == *bash ]]
then
   export XDG_CONFIG_HOME="\$REPOS_BASE"/.config
   export   XDG_DATA_HOME="\$REPOS_BASE"/.local/share

   bash "\$REPOS_BASE"/scripts/db-create

   . "\$REPOS_BASE"/bash/.bash_profile

   # ^ which in turn sources .bash_profile_after:
   # exec bash --rcfile "$REPOS_BASE"/bash/.bashrc
   # this way I avoid sourcing my bashrc twice
fi
REMOTE

command ssh -t $@ $host_commands
